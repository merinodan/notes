Interesting articles, post-mortems, and take-aways:

Article: The Road to uChat: Building Uberâ€™s Internal Chat Solution
Date: December 12, 2018
Date released: July 25, 2017
Link: https://eng.uber.com/uchat/
Thoughts: Very interesting to see how Uber built their own solution and scaled appropriately. Offers insight about internal solutions
    and how Go is becoming a language of the future. Shows why to not use monolothic repos and shows how they had a repo for Puppet
    (infra) changes as well as a repo for application changes.

Holy Grail: The Twelve-Factor App
Date: December 14, 2018
Date released: 2017
Link: https://12factor.net/
Thoughts: Bible for buildilng a modern application. Twelve factors: codebase, dependencies, config, backing services,
    build (release & run), processes, port binding, concurrency, disposability, dev/prod parity, logs, admin processes. These things
    combined can help build modern, scalable, reliable, programs.

Holy Grail: Go best practices, six years in
Date: January 24, 2019
Date released: 2016
Link: https://peter.bourgon.org/go-best-practices-2016/
Thoughts: Bible for Go and its best practices. Defined from a very technical standpoint, so some of it is kinda hard to follow
    along with completely. Still good to take note of the things stated here and Bourgon's "top tips" for writing in Go.

Article: What's in a name?
Date: January 29, 2019
Date released: October 2014
Link: https://talks.golang.org/2014/names.slide#1
Thoughts: Written by Andrew Gerrard at Google, provides a guideline for how variables should be named in Go. Variables should
    be short (easy to type), consistent (easy to guess), and accurate (easy to understand). A rule of thumb is that the greater
    the distance between a name's declaration and uses, the longer a name should be.

Article: DevOps Team Topologies
Date: January 29, 2019
Date released: 2013
Link: https://web.devopstopologies.com/index.html
Thoughts: An excellent piece that describes where teams may fail in their strive to achieve DevOpsy-ness. Shows anti-types
    (what not to do) in combination with ideal team topologies (what to do) to show the comparision between different styles
    of DevOps, since a style that works for one company may not necessarily work for another.

Article: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)
Date: March 14, 2019 (Pi day!)
Date released: October 8, 2003
Link: https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/
Thoughts: An interesting article written by Joel Spolsky, the creator of StackOverflow. Talks about the interesting conception of Unicode and
    the corresponding creation of UTF-8 and why it was necessary.

Article: Structure and Layout in System Dashboard Design (Series)
Date: May 14, 2019
Date released: April 4, 2019
Link: http://onemogin.com/observability/dashboards/practitioners-guide-to-system-dashboard-design.html
Thoughts: Written by observability expert Cory G. Watson, Watson writes about the how to create efficient and effective dashboards for your
    users. Shows the benefits of using different costs and layouts, as well as how powerful providing context on your graphs can be.

Article: How to write idempotent Bash scripts
Date: July 8, 2019
Date released: July 3, 2019
Link: https://arslan.io/2019/07/03/how-to-write-idempotent-bash-scripts/
Thoughts: Good reference for how to write idempotent (consistent) BASH scripts so you don't need counter-scripts for your scripts

Article: Compiling Containers - Dockerfiles, LLVM, and BuildKit
Date: April 14, 2021
Date released: March 17, 2021
Link: https://earthly.dev/blog/compiling-containers-dockerfiles-llvm-and-buildkit/
Thoughts: Draws interesting comparisons between building a docker image using buildkit and building binaries using LLVM (and how they are not so different).
